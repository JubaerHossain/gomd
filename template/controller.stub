package controllers

import (
	"github.com/gin-gonic/gin"
	"github.com/JubaerHossain/gomd"
	"{{PackageName}}/{{PackageRoot}}/{{SingularLowerName}}/validation"
	"{{PackageName}}/{{PackageRoot}}/{{SingularLowerName}}/services"
	"net/http"
)
func {{TitleName}}Index() gin.HandlerFunc {
	return func(c *gin.Context) {
        page := c.DefaultQuery("page", "1")
        limit := c.DefaultQuery("limit", "10")
        status := c.DefaultQuery("status", "")

        var filter map[string]interface{} = make(map[string]interface{})
        filter["page"] = page
        filter["limit"] = limit
        filter["status"] = status

        {{PluralLowerName}}, paginate := services.All{{TitleName}}(filter)

        artifact.Res.Code(200).Data({{PluralLowerName}}).Raw(map[string]interface{}{
            "meta": paginate,
        }).Json(c)
	}
}


func {{TitleName}}Create() gin.HandlerFunc {
	return func(c *gin.Context) {
		var create{{TitleName}} validation.Create{{TitleName}}Request

		defer func() {
			if err := recover(); err != nil {
				artifact.Res.Code(http.StatusUnprocessableEntity).Message("error").Data(err).Json(c)
			}
		}()

		if err := c.ShouldBind(&create{{TitleName}}); err != nil {
			artifact.Res.Code(http.StatusBadRequest).Message("Bad Request").Data(err.Error()).AbortWithStatusJSON(c)
			return
		}

		{{SingularLowerName}} := services.CreateA{{TitleName}}(create{{TitleName}})

		artifact.Res.Code(http.StatusCreated).Message("success").Data({{SingularLowerName}}).Json(c)
	}
}


func {{TitleName}}Show() gin.HandlerFunc {
	return func(c *gin.Context) {
		defer func() {
			if err := recover(); err != nil {
				artifact.Res.Code(http.StatusNotFound).Message(http.StatusText(http.StatusNotFound)).Json(c)
			}
		}()

		{{SingularLowerName}}Id := c.Param("{{SingularLowerName}}Id")

		{{SingularLowerName}} := services.A{{TitleName}}({{SingularLowerName}}Id)

		artifact.Res.Code(http.StatusOK).Message("success").Data({{SingularLowerName}}).Json(c)
	}
}


func {{TitleName}}Update() gin.HandlerFunc {
	return func(c *gin.Context) {
		var update{{TitleName}} validation.Update{{TitleName}}Request

		defer func() {
			if err := recover(); err != nil {
				artifact.Res.Code(http.StatusUnprocessableEntity).Message(http.StatusText(http.StatusUnprocessableEntity)).Data(err).Json(c)
			}
		}()

		{{SingularLowerName}}Id := c.Param("{{SingularLowerName}}Id")

		if err := c.ShouldBind(&update{{TitleName}}); err != nil {
			artifact.Res.Code(http.StatusBadRequest).Message(http.StatusText(http.StatusBadRequest)).Data(err.Error()).AbortWithStatusJSON(c)
			return
		}

		{{SingularLowerName}}, err := services.UpdateA{{TitleName}}({{SingularLowerName}}Id, update{{TitleName}})

		if err != nil {
			artifact.Res.Code(http.StatusInternalServerError).Message(http.StatusText(http.StatusInternalServerError)).Json(c)
			return
		}

		artifact.Res.Code(http.StatusOK).Message("Successfully Updated !!!").Data({{SingularLowerName}}).Json(c)
	}
}


func {{TitleName}}Delete() gin.HandlerFunc {
	return func(c *gin.Context) {
		defer func() {
			if err := recover(); err != nil {
				artifact.Res.Code(http.StatusUnprocessableEntity).Message("error").Data(err).Json(c)
			}
		}()

		{{SingularLowerName}}Id := c.Param("{{SingularLowerName}}Id")
		err := services.DeleteA{{TitleName}}({{SingularLowerName}}Id)

		if !err {
			artifact.Res.Code(http.StatusInternalServerError).Message("something wrong").Json(c)
			return
		}

		artifact.Res.Code(http.StatusOK).Message("Successfully Delete !!!").Json(c)
	}
}
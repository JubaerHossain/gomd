package services

import (
	"fmt"
	pagination "github.com/gobeam/mongo-go-pagination"
	"{{PackageName}}/{{PackageRoot}}/{{SingularLowerName}}/dto"
	"{{PackageName}}/{{PackageRoot}}/{{SingularLowerName}}/models"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo/options"
	"log"
	"strconv"
    "time"
)

func All{{TitleName}}(requestFilter map[string]interface{}) ([]models.{{TitleName}}, pagination.PaginationData) {
	var {{PluralLowerName}} []models.{{TitleName}}

	filter := bson.M{}

	if requestFilter["status"] != "" {
		filter["status"] = requestFilter["status"]
	}

	page, _ := strconv.ParseInt(requestFilter["page"].(string), 10, 64)
	limit, _ := strconv.ParseInt(requestFilter["limit"].(string), 10, 64)

	paginatedData, err := pagination.New(models.{{TitleName}}Collection.Collection).
		Page(page).
		Limit(limit).
		Sort("created_at", -1).
		Decode(&{{PluralLowerName}}).
		Filter(filter).
		Find()

	if err != nil {
		panic(err)
	}
	return {{PluralLowerName}}, paginatedData.Pagination
}

func CreateA{{TitleName}}(create{{TitleName}}Dto dto.Create{{TitleName}}Request) models.{{TitleName}} {
	{{SingularLowerName}} := models.{{TitleName}}{
		Id:                 primitive.NewObjectID(),
		Task:               create{{TitleName}}Dto.Task,
		Status:             create{{TitleName}}Dto.Status,
		CreatedAt:          time.Now(),
		UpdatedAt:          time.Now(),
	}

	result, err := models.{{TitleName}}Collection.InsertOne({{SingularLowerName}})
	if err != nil || result == nil {
		panic(err)
	}

	return {{SingularLowerName}}
}

func UpdateA{{TitleName}}({{SingularLowerName}}Id string, update{{TitleName}}Dto dto.Update{{TitleName}}Request) (models.{{TitleName}}, error) {

	objId, _ := primitive.ObjectIDFromHex({{SingularLowerName}}Id)

	upsert := true
	after := options.After
	opt := options.FindOneAndUpdateOptions{
		ReturnDocument: &after,
		Upsert:         &upsert,
	}

	result := models.{{TitleName}}Collection.FindOneAndUpdate(
		bson.M{"_id": objId},
		bson.D{
			{"$set", bson.M{
				"task":                update{{TitleName}}Dto.Task,
				"status":              update{{TitleName}}Dto.Status,
				"updated_at":          time.Now(),
			}},
		},
		&opt,
	)

	if result.Err() != nil {
		log.Println("Err ", result.Err())
		return models.{{TitleName}}{}, result.Err()
	}

	var {{SingularLowerName}} models.{{TitleName}}
	if err := result.Decode(&{{SingularLowerName}}); err != nil {
		return models.{{TitleName}}{}, err
	}

	return {{SingularLowerName}}, nil
}

func A{{TitleName}}({{SingularLowerName}}Id string) models.{{TitleName}} {
	var {{SingularLowerName}} models.{{TitleName}}

	objId, _ := primitive.ObjectIDFromHex({{SingularLowerName}}Id)

	err := models.{{TitleName}}Collection.FindOne(bson.M{"_id": objId}).Decode(&{{SingularLowerName}})

	if err != nil {
		fmt.Println(err)
		panic(err)
	}

	return {{SingularLowerName}}
}

func DeleteA{{TitleName}}({{SingularLowerName}}Id string) bool {
	objId, _ := primitive.ObjectIDFromHex({{SingularLowerName}}Id)

	result := models.{{TitleName}}Collection.FindOneAndDelete(bson.D{{"_id", objId}})

	if result.Err() != nil {
		return false
	}

	return true
}